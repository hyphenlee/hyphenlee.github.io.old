<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | hyphen lee's personal blog]]></title>
  <link href="http://hyphenlee.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://hyphenlee.github.io/"/>
  <updated>2014-09-03T20:39:16+08:00</updated>
  <id>http://hyphenlee.github.io/</id>
  <author>
    <name><![CDATA[hyphen lee]]></name>
    <email><![CDATA[lhfcjhyy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[database optimise]]></title>
    <link href="http://hyphenlee.github.io/blog/2014/06/10/database-optimise/"/>
    <updated>2014-06-10T16:10:00+08:00</updated>
    <id>http://hyphenlee.github.io/blog/2014/06/10/database-optimise</id>
    <content type="html"><![CDATA[<h6>最近公司开发的软件遇到效率上的性能瓶颈，所以写了些代码测试一下数据库的读写效率：</h6>

<hr />

<h2>测试目的：</h2>

<p> 测试表项设立主键与否，以及主键类型对检索效率的影响。</p>

<h2>测试过程：</h2>

<p>建立三个表，列值类型都是 int id和 varchar(100) uid,表一名为not_key_table,无主键，表二名为test_id_key设置int值为主键，表三m名为test_uid_key,设立varchar(100)为主键。分别往三个表插入一万条数据，然后从第5000条数据开始三个表连续查询1000次，统计使用的时间；</p>

<h2>代码：</h2>

<h3>插入数据：</h3>

<pre><code>      char *st = "INSERT INTO test.not_key_table(`id`, `uid`) VALUES(%d, '%s')";
      size_t st_len = strlen(st);

      char *query=new char[st_len + 1024+1]; 
      char uid[65];
      for (int i = 0; i &lt; 10000; i++)
      {
           dcmGenerateUniqueIdentifier(uid);
           int len = sprintf_s(query, st_len + 1024+1, (const char*)st,i+1, uid);
           if (mysql_real_query(mydata_, query, len))
           {
                assert(false);
           }
      }
</code></pre>

<h3>查询代码  ：</h3>

<p>以id作为检索条件：</p>

<pre><code> char *st = "select * from no_key_table where id=%d";
 size_t st_len = strlen(st);
 char *query=new char[st_len + 1024+1]; 
 MYSQL_RES *result = NULL;
 std::vector&lt;string&gt; uid_list;
 for (int i = 0; i &lt; 1000; i++)
 {
      int len = sprintf_s(query, st_len + 1024+1, st,i+5000);
      if ( mysql_query(mydata_, query))
      {
           assert(false);
      }
      result = mysql_store_result(mydata_);
      MYSQL_ROW row = NULL;
      while((row = mysql_fetch_row(result)))
      {
           uid_list.push_back(row[1]);
      }
 }
</code></pre>

<p>以uid作为检索条件：</p>

<pre><code> char *st2 = "select * from not_key_tablewhere uid='%s'";
 size_t st_lens = strlen(st2);
 char *querys=new char[st_lens + 1024+1]; 
 MYSQL_RES *results = NULL;
 for (int i = 0; i &lt; 1000; i++)
 {
      int len = sprintf_s(querys, st_lens + 1024+1, st2,uid_list[i].c_str());
      if ( mysql_query(mydata_, querys))
      {}
      results = mysql_store_result(mydata_);
 }
</code></pre>

<p>三个表的的测试代码基本相同，表名改一下就行，测试计时使用的是断点，在关键代码的开始和结尾设置断点，当代码运行到关键代码的开始初中断后，在vs2012的监视窗口处添加一个@clk的变量，并将值设为0，然后运行代码到第二个断点中断后，监视窗口就会显示运行这段代码所花的时钟周期。
测试结果：</p>

<pre><code>test speed of retrieve data from databse with or without primary key.
1. 10000 line data
** select * from table 1000 times by retrieve id;
*** uid table without primary key
8,230,374
8,550,001
**** one time 
9467
8528
*** test_id_key with int number as the primary key
184,933
171,449
**** one time
1085
1014
** retrivev by uid 
*** uid table without primary key
15,997,671
16,019,505
*** test_uid_key with varchar(100) as the primary key
115,794
79,089
80,074

|---------------+------+------+---|
| million clock |   id |  uid |   |
|---------------+------+------+---|
| table uid     |  8.3 | 16.0 |   |
|---------------+------+------+---|
| test_uid_key  |      | 0.08 |   |
|---------------+------+------+---|
| test_id_key   | 0.18 |      |   |
|---------------+------+------+---|
</code></pre>

<p>上面是当时用emacs的org模式记得笔记，记得数字都是测试所花的时间，总的来说有主键和美主键的差别是很大的，理论上来说mysql 用的是B+树，普通查询的时间复杂度是O(n),而有主键的时间复杂度是O(log2(n)),8条数据无主键要8秒，有主键就3秒，但1000条数据有主键就只要10秒，差距是很大的。<br/>
这次测试让我意外的是用字符串作为主键时间居然比用int型做主键效率还快，按理来说字符串比较的速度应该会比整型的比较会慢很多，但这里却相反，有点纳闷，有一部分原因或许是代码本身以及计时方式产生的误差，具体原因不清楚（知道原因的一定要和我说啊！)，但以后至少可以放心的使用不长的字符串作为主键了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poco C++通过odbc连接 mysql传送大数据]]></title>
    <link href="http://hyphenlee.github.io/blog/2013/10/09/database/"/>
    <updated>2013-10-09T14:13:00+08:00</updated>
    <id>http://hyphenlee.github.io/blog/2013/10/09/database</id>
    <content type="html"><![CDATA[<h5>最近在做数据库开发，使用的是poco C++库，用odbc的方式链接mysql,在传输      大的二进制数据折腾了很长时间，特写个文章给需要的人。</h5>

<h2>连接数据库</h2>

<p>连接数据库本身没什么难度，按着poco c++<a href="http://pocoproject.org/docs/00200-DataUserManual.html">官网的教程</a>就能连上，
郁闷的是教程有一些错误，而且和代码版本对不上，我开始用1.4.6就发现好些错误，如插入数据时用按官网用</p>

<pre><code>std::string aName("Peter");
ses &lt;&lt; "INSERT INTO FORENAME VALUES(:name)", use(aName), now;
后面整了很长时间都不行,看了测试代码才知道应该用下面的方式:
std::string aName("Peter");
ses &lt;&lt; "INSERT INTO FORENAME VALUES(?)", use(aName), now;
</code></pre>

<p>再换到1.5.2版本时，发现use,now的命名空间都变了，由原来的Poco::Data,变成Poco::Data::Keywords, Poco/Data/common.h文件也消失了。
官网的教程与代码是有很多是不同步的，所以:</p>

<blockquote><p>“RTFSC – Read The F**king Source Code ☺!” ––Linus Benedict Torvalds</p></blockquote>

<p>使用自定义类型插入时，insert语句中的VALUES(?,?,?),问号个数要与模板中的数据项目个数一致，
自定义数据类型的数据插入次序也要和数据库中表的列的次序相对应。
odbc的配置对于新手也是个问题,windows(windows8 64 位)的32位odbc配置管理器在这里:</p>

<blockquote><p>C:\Windows\SysWOW64\odbcad32.exe</p></blockquote>

<p>32位和64位是有区别的，32位只能用32位的驱动，mysql的odbc驱动也要额外安装
连接基本就是这些问题了</p>

<h2>二进制数据插入、读取</h2>

<p>二进制数据读取会比较麻烦，首先数据的大小要有个明确的范围，因为要设在mysql的缓冲区和poco的缓冲区，mysql的缓冲区设置方法为：</p>

<pre><code>mysql&gt; set global max_allowed_packet=1000000000;
</code></pre>

<p>或者在mysql的配置文件 里改(安装文件根目录的my.ini，没有的话用bin/mysqlinstanceconfig.exe创建)，增加一行：</p>

<blockquote><p>max_allowed_packet=256M</p></blockquote>

<p>程序里则为:</p>

<pre><code>Session session("ODBC",DSN);
std::size_t maxFldSize=0x0fffffff; //256MB
session.setProperty("maxFieldSize",Poco::Any(maxFldSize));
</code></pre>

<p>二进制数据插入、读取方法:
BLOB dat<em>((unsigned char*)buffer,length);
std::vector<CLOB> te_bl;
session&lt;&lt;&ldquo;insert into blobtest  values(?)&rdquo; ,use(dat</em>),now;
session&lt;&lt;&ldquo;select * from blobtest&rdquo;,into(te_bl),now;</p>
]]></content>
  </entry>
  
</feed>
